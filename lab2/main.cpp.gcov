        -:    0:Source:src/main.cpp
        -:    1:#include <iostream>
        -:    2:#include <limits>
        -:    3:using namespace std;
        -:    4:#include "../include/Solve.h"
        -:    5:
        1:    6:int main() {
        -:    7:    string fileName;
        -:    8:    int option;
        1:    9:    Solver solver;
        -:   10:
        -:   11:    do {
        5:   12:        std::cout << "\n--------MENU--------\n";
        5:   13:        std::cout << "1. Read file\n";
        5:   14:        std::cout << "2. Solve\n";
        5:   15:        std::cout << "3. Run Tests\n";
        5:   16:        std::cout << "4. Exit\n";
        5:   17:        std::cout << "Option: ";
        -:   18:
        5:   19:        while (!(std::cin >> option)) {
    #####:   20:            std::cin.clear();
    #####:   21:            std::cin.ignore(numeric_limits<streamsize>::max(), '\n');
        -:   22:            std::cout
    #####:   23:                << "Numero invalido, se debe seleccionar alguno entre (1-4): ";
        -:   24:        }
        -:   25:
        5:   26:        switch (option) {
        2:   27:            case 1: {
        2:   28:                std::cout << "\nEnter the filename: ";
        2:   29:                std::cin >> fileName;
        2:   30:                if (solver.initialize(fileName)) {
        2:   31:                    std::cout << "File read correctly\n";
        -:   32:                }
        -:   33:                break;
        -:   34:            }
        -:   35:
        -:   36:            case 2: {
        2:   37:                if (!solver.isInitialized()) {
    #####:   38:                    std::cout << "Error: Must read a valid file first\n";
        -:   39:                    break;
        -:   40:                }
        -:   41:                try {
        2:   42:                    solver.solve();
        2:   43:                    solver.printSolution();
    =====:   44:                } catch (const std::exception &e) {
    =====:   45:                    std::cerr << "Error solving: " << e.what() << std::endl;
    =====:   46:                }
        -:   47:                break;
        -:   48:            }
        -:   49:
    #####:   50:            case 3: {
        -:   51:                try {
        -:   52:                    // Ejemplo bÃ¡sico de test
    #####:   53:                    Solver testSolver;
    #####:   54:                    if (testSolver.initialize("test_graph.txt")) {
    #####:   55:                        testSolver.solve();
    #####:   56:                        std::cout << "Test passed successfully\n";
    #####:   57:                        testSolver.printSolution();
        -:   58:                    } else {
    #####:   59:                        std::cout << "Test failed: Could not load test file\n";
        -:   60:                    }
    #####:   61:                } catch (const std::exception &e) {
    =====:   62:                    std::cerr << "Test execution failed: " << e.what()
        -:   63:                              << std::endl;
        -:   64:                    return 1;
    =====:   65:                }
    #####:   66:                break;
        -:   67:            }
        -:   68:
        1:   69:            case 4: {
        1:   70:                std::cout << "Exiting program...\n";
        -:   71:                return 0;
        -:   72:            }
        -:   73:
    #####:   74:            default: {
    #####:   75:                std::cout << "Invalid option. Please select 1-4.\n";
        -:   76:                break;
        -:   77:            }
        -:   78:        }
        -:   79:    } while (true);
        -:   80:
        -:   81:    return 0;
        1:   82:}
